!function(n){"use strict";if("object"==typeof module&&module&&"object"==typeof module.exports)module.exports=n();else{if("undefined"==typeof window&&"undefined"==typeof self)throw new Error("Environment was not anticipated.");var t="undefined"!=typeof window?window:self,e=t.amp;t.amp=n(),t.amp.noConflict=function(){return t.amp=e,this}}}(function(){"use strict";function n(n){var e={};r(n.data.content["@graph"],function(n){e[n["@id"]]=n});var o=n.data.requestedContent[0]["@id"];return t({"@id":o},e)}function t(n,i){return r(o(n),function(t){var e=n[t];"@id"===t&&r(o(i[e]),function(t){n[t]=i[e][t]})}),r(o(n),function(o){var f=n[o];null!==f&&"object"==typeof f?n[o]=t(n[o],i):e(f)&&r(f,function(e,r){n[o][r]=t(n[o][r],i)})}),n}var e=Array.isArray||function(n){return"[object Array]"===Object.prototype.toString.call(n)},o=Object.keys||function(n){var t=[];for(var e in n)n.hasOwnProperty(e)&&t.push(e);return t},r=function(n,t,o){if(e(n))if(n.forEach)n.forEach(t,o);else for(var r=0,i=n.length;i>r;r++)t.call(o,n[r],r,n)};return{inlineContent:n}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNtcy1qYXZhc2NyaXB0LXNkay5qcyJdLCJuYW1lcyI6WyJkZWZpbml0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyIsInNlbGYiLCJFcnJvciIsImdsb2JhbCIsInByZXZpb3VzQW1wIiwiYW1wIiwibm9Db25mbGljdCIsInRoaXMiLCJpbmxpbmVDb250ZW50IiwiY29udGVudCIsImNvbnRlbnRNYXAiLCJfZm9yRWFjaCIsImRhdGEiLCJyZXF1ZXN0ZWRDb250ZW50IiwiaW5saW5lQ2hpbGRDb250ZW50IiwiQGlkIiwicGFyZW50Tm9kZSIsIl9rZXlzIiwia2V5IiwidmFsdWUiLCJjaGlsZEtleSIsIl9pc0FycmF5IiwiaXRlbSIsImkiLCJBcnJheSIsImlzQXJyYXkiLCJhcmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJrZXlzIiwib2JqIiwiayIsImhhc093blByb3BlcnR5IiwicHVzaCIsImFyciIsIml0ZXJhdG9yIiwiY29udGV4dCIsImZvckVhY2giLCJsZW4iLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJDQUNBLFNBQVdBLEdBQ1AsWUFFQSxJQUF1QixnQkFBWEMsU0FBdUJBLFFBQW9DLGdCQUFuQkEsUUFBT0MsUUFDdkRELE9BQU9DLFFBQVVGLFFBQ2QsQ0FBQSxHQUFzQixtQkFBWEcsU0FBMEMsbUJBQVRDLE1BVS9DLEtBQU0sSUFBSUMsT0FBTSxtQ0FUaEIsSUFBSUMsR0FBMkIsbUJBQVhILFFBQXlCQSxPQUFTQyxLQUVsREcsRUFBY0QsRUFBT0UsR0FDekJGLEdBQU9FLElBQU1SLElBQ2JNLEVBQU9FLElBQUlDLFdBQWEsV0FFcEIsTUFEQUgsR0FBT0UsSUFBTUQsRUFDTkcsUUFNaEIsV0FDQyxZQTZCQSxTQUFTQyxHQUFjQyxHQUNuQixHQUFJQyxLQUNKQyxHQUFTRixFQUFRRyxLQUFLSCxRQUFRLFVBQVcsU0FBU0EsR0FDOUNDLEVBQVdELEVBQVEsUUFBVUEsR0FFakMsSUFBSUksR0FBbUJKLEVBQVFHLEtBQUtDLGlCQUFpQixHQUFHLE1BQ3hELE9BQVFDLElBQW9CQyxNQUFPRixHQUFtQkgsR0FHMUQsUUFBU0ksR0FBbUJFLEVBQVlOLEdBb0JwQyxNQW5CQUMsR0FBU00sRUFBTUQsR0FBYSxTQUFTRSxHQUNqQyxHQUFJQyxHQUFRSCxFQUFXRSxFQUNaLFNBQVJBLEdBQ0NQLEVBQVNNLEVBQU1QLEVBQVdTLElBQVMsU0FBU0MsR0FDeENKLEVBQVdJLEdBQVlWLEVBQVdTLEdBQU9DLE9BS3JEVCxFQUFTTSxFQUFNRCxHQUFhLFNBQVNFLEdBQ2pDLEdBQUlDLEdBQVFILEVBQVdFLEVBQ1YsUUFBVkMsR0FBbUMsZ0JBQVZBLEdBQ3hCSCxFQUFXRSxHQUFPSixFQUFtQkUsRUFBV0UsR0FBTVIsR0FDakRXLEVBQVNGLElBQ2RSLEVBQVNRLEVBQU8sU0FBU0csRUFBTUMsR0FDM0JQLEVBQVdFLEdBQUtLLEdBQUtULEVBQW1CRSxFQUFXRSxHQUFLSyxHQUFJYixPQUlqRU0sRUF6RFgsR0FBSUssR0FBV0csTUFBTUMsU0FBVyxTQUFVQyxHQUN0QyxNQUErQyxtQkFBeENDLE9BQU9DLFVBQVVDLFNBQVNDLEtBQUtKLElBR3RDVCxFQUFRVSxPQUFPSSxNQUFRLFNBQVVDLEdBQ2pDLEdBQUlELEtBQ0osS0FBSyxHQUFJRSxLQUFLRCxHQUNOQSxFQUFJRSxlQUFlRCxJQUNuQkYsRUFBS0ksS0FBS0YsRUFHbEIsT0FBT0YsSUFHUHBCLEVBQVcsU0FBU3lCLEVBQUtDLEVBQVVDLEdBQ25DLEdBQUlqQixFQUFTZSxHQUliLEdBQUdBLEVBQUlHLFFBQ0hILEVBQUlHLFFBQVFGLEVBQVVDLE9BRXRCLEtBQUksR0FBSXBCLEdBQU0sRUFBR3NCLEVBQU1KLEVBQUlLLE9BQWNELEVBQU50QixFQUFXQSxJQUMxQ21CLEVBQVNQLEtBQUtRLEVBQVNGLEVBQUlsQixHQUFNQSxFQUFLa0IsR0FxQ2xELFFBQ0k1QixjQUFjQSIsImZpbGUiOiJjbXMtamF2YXNjcmlwdC1zZGsubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgd2luZG93IHNlbGYqL1xyXG4oZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBzZWxmO1xyXG5cclxuICAgICAgICB2YXIgcHJldmlvdXNBbXAgPSBnbG9iYWwuYW1wO1xyXG4gICAgICAgIGdsb2JhbC5hbXAgPSBkZWZpbml0aW9uKCk7XHJcbiAgICAgICAgZ2xvYmFsLmFtcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBnbG9iYWwuYW1wID0gcHJldmlvdXNBbXA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVudmlyb25tZW50IHdhcyBub3QgYW50aWNpcGF0ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxufSkoZnVuY3Rpb24oKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgX2tleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBrIGluIG9iaikge1xyXG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfZm9yRWFjaCA9IGZ1bmN0aW9uKGFyciwgaXRlcmF0b3IsIGNvbnRleHQpe1xyXG4gICAgICAgIGlmKCFfaXNBcnJheShhcnIpKXtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoYXJyLmZvckVhY2gpe1xyXG4gICAgICAgICAgICBhcnIuZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGZvcih2YXIga2V5ID0gMCwgbGVuID0gYXJyLmxlbmd0aDsga2V5IDwgbGVuOyBrZXkrKyl7XHJcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGFycltrZXldLCBrZXksIGFycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGlubGluZUNvbnRlbnQoY29udGVudCl7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRNYXAgPSB7fTtcclxuICAgICAgICBfZm9yRWFjaChjb250ZW50LmRhdGEuY29udGVudFsnQGdyYXBoJ10sIGZ1bmN0aW9uKGNvbnRlbnQpe1xyXG4gICAgICAgICAgICBjb250ZW50TWFwW2NvbnRlbnRbJ0BpZCddXSA9IGNvbnRlbnQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHJlcXVlc3RlZENvbnRlbnQgPSBjb250ZW50LmRhdGEucmVxdWVzdGVkQ29udGVudFswXVtcIkBpZFwiXTtcclxuICAgICAgICByZXR1cm4gIGlubGluZUNoaWxkQ29udGVudCh7XCJAaWRcIjogcmVxdWVzdGVkQ29udGVudH0sIGNvbnRlbnRNYXApXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5saW5lQ2hpbGRDb250ZW50KHBhcmVudE5vZGUsIGNvbnRlbnRNYXApe1xyXG4gICAgICAgIF9mb3JFYWNoKF9rZXlzKHBhcmVudE5vZGUpLCBmdW5jdGlvbihrZXkpe1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJlbnROb2RlW2tleV07XHJcbiAgICAgICAgICAgIGlmKGtleSA9PT0gJ0BpZCcpe1xyXG4gICAgICAgICAgICAgICAgX2ZvckVhY2goX2tleXMoY29udGVudE1hcFt2YWx1ZV0pLCBmdW5jdGlvbihjaGlsZEtleSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZVtjaGlsZEtleV0gPSBjb250ZW50TWFwW3ZhbHVlXVtjaGlsZEtleV07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIF9mb3JFYWNoKF9rZXlzKHBhcmVudE5vZGUpLCBmdW5jdGlvbihrZXkpe1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJlbnROb2RlW2tleV07XHJcbiAgICAgICAgICAgIGlmKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpe1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZVtrZXldID0gaW5saW5lQ2hpbGRDb250ZW50KHBhcmVudE5vZGVba2V5XSwgY29udGVudE1hcCk7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKF9pc0FycmF5KHZhbHVlKSl7XHJcbiAgICAgICAgICAgICAgICBfZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oaXRlbSwgaSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZVtrZXldW2ldID0gaW5saW5lQ2hpbGRDb250ZW50KHBhcmVudE5vZGVba2V5XVtpXSwgY29udGVudE1hcCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwYXJlbnROb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5saW5lQ29udGVudDppbmxpbmVDb250ZW50XHJcbiAgICB9O1xyXG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
